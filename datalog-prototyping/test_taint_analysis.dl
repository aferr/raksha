#include "taint_analysis.dl"

//-----------------------------------------------------------------------------
// Program Manifests
//-----------------------------------------------------------------------------

// Module 1
//      reads: 
//          some_struct{ a, b }
//          other_input
//      writes:
//          mod1out
groundedFlatMod($FlatMod(
    $Cons("some_struct.a", $Cons("some_struct.b",
        $Cons("other_input", $Nil()))),
    $Cons("mod1out", $Nil())
)).

// the label of "other_input" is the empty set (which makes it public).
// so it has no label elements

// Module 2
//     reads:
//         mod1out
//         input4
//     writes:
//         mod2out 
groundedFlatMod($FlatMod(
    $Cons("mod1out", $Cons("input4", $Nil())),
    $Cons("mod2out", $Nil())
)).

//-----------------------------------------------------------------------------
// Policy
//-----------------------------------------------------------------------------

// Assign owners to tags
ownsTag("Alice", "raw_video").
ownsTag("Alice", "image_selection").
ownsTag("Alice", "product_id").
ownsTag("ServiceProvider", "model_weights").

// Assign tags to initial inputs
fieldHasTag("some_struct.a", "raw_video").
fieldHasTag("some_struct.b", "image_selection").
fieldHasTag("input4", "model_weights").

// The label of mod1out is downgraded to public (= empty set) 
// because both the raw_video and image_selection tags are removed, and then
// upgraded to {"product_id"} with this line:
fieldHasTag("mod1out", "product_id").

// Set the downgrades permitted by both parties
saysDowngrades("Alice", "mod1out", "raw_video").
saysDowngrades("Alice", "mod1out", "image_selection").
saysDowngrades("ServiceProvider", "mod2out", "model_weights").

//----------------------------------------------------------------------------- 
// Policy Check
//-----------------------------------------------------------------------------

.decl test_label_check(x: number)

// Define a label for doing the check of the final output
isLabel("mod2out_expected_label").
isMember("product_id", "mod2out_expected_label").

// The check passes if this is true (i.e., the CSV for test_label_check 
// includes '1').
test_label_check(1) :- fieldLabelFlowsTo("mod2out", "mod2out_expected_label").

.output test_label_check
.output fieldHasTag
.output isMember
.output notFieldLabelFlowsTo
.output fieldLabelFlowsTo
